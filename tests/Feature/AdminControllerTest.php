<?php

namespace Tests\Feature;

use App\Models\User;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class AdminControllerTest extends TestCase
{
    use DatabaseTransactions, WithoutMiddleware;

    private $user;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::find(1);
    }

    /**
     * @covers \App\Http\Controllers\Auth\AdminController::showEditUserView()
     */
    public function testEditUserView()
    {
        $response = $this->actingAs($this->user)->get('admin/users/1');
        $response->assertStatus(200);
    }
    /**
     * @covers \App\Http\Controllers\Auth\AdminController::showEditUserView()
     */
    public function testEditUserViewException()
    {
        $response = $this->actingAs($this->user)->get('admin/users/999');
        $response->assertStatus(302);
    }

    /**
     * @covers \App\Http\Controllers\Auth\AdminController::showRoutesView()
     */
    public function testRoutesView()
    {
        $response = $this->actingAs($this->user)->get('admin/routes');
        $response->assertStatus(200);
    }

    /**
     * @covers \App\Http\Controllers\Auth\AdminController::showUsersListView()
     */
    public function testUsersView()
    {
        $response = $this->actingAs($this->user)->get('admin/users');
        $response->assertStatus(200);
    }

    /**
     * @covers \App\Http\Controllers\Auth\AdminController::showURLsListView()
     */
    public function testURLsView()
    {
        $response = $this->actingAs($this->user)->get('admin/urls');
        $response->assertStatus(200);
    }

    /**
     * @covers \App\Http\Controllers\Auth\AdminController::showURLWhitelistView()
     */
    public function testURLsWhitelistView()
    {
        $response = $this->actingAs($this->user)->get('admin/urls/whitelist');
        $response->assertStatus(200);
    }

    /**
     * @covers \App\Http\Controllers\Auth\AdminController::showAddURLWhitelistView()
     */
    public function testAddURLsWhitelistView()
    {
        $response = $this->actingAs($this->user)->get('admin/urls/whitelist/add');
        $response->assertStatus(200);
    }

    /**
     * @covers \App\Http\Controllers\Auth\AdminController::showEditURLView()
     */
    public function testEditURLView()
    {
        $response = $this->actingAs($this->user)->get('admin/urls/1');
        $response->assertStatus(200);
    }

    /**
     * @covers \App\Http\Controllers\Auth\AdminController::showEditURLView()
     */
    public function testEditURLViewException()
    {
        $response = $this->actingAs($this->user)->get('admin/urls/-1');
        $response->assertStatus(302);
    }

    /**
     * @covers \App\Http\Controllers\Auth\AdminController::deleteURL()
     */
    public function testDeleteURL()
    {
        $response = $this->actingAs($this->user)->delete('admin/urls', [
            'id' => 1,
        ]);
        $response->assertStatus(302);
    }

    /**
     * @covers \App\Http\Controllers\Auth\AdminController::deleteURL()
     */
    public function testDeleteURLException()
    {
        $response = $this->actingAs($this->user)->delete('admin/urls', [
            'id' => 999,
        ]);
        $response->assertStatus(302);
    }

    /**
     * @covers \App\Http\Controllers\Auth\AdminController::deleteWhitelistURL()
     */
    public function testDeleteWhitelistURL()
    {
        $response = $this->actingAs($this->user)->delete('admin/urls/whitelist', [
            'id' => 1,
        ]);
        $response->assertStatus(302);
    }

    /**
     * @covers \App\Http\Controllers\Auth\AdminController::deleteWhitelistURL()
     */
    public function testDeleteWhitelistURLException()
    {
        $response = $this->actingAs($this->user)->delete('admin/urls/whitelist', [
            'id' => 999,
        ]);
        $response->assertStatus(302);
    }

    /**
     * @covers \App\Http\Controllers\Auth\AdminController::addWhitelistURL()
     */
    public function testAddWhitelistURL()
    {
        $response = $this->actingAs($this->user)->post('admin/urls/whitelist', [
            'url' => 'https://url.com',
            'internal' => false,
        ]);
        $response->assertStatus(302);
    }

    /**
     * @covers \App\Http\Controllers\Auth\AdminController::updateURL()
     * @covers \App\Models\ShortURL\ShortURL::updateShortURL()
     */
    public function testUpdateURL()
    {
        $response = $this->actingAs($this->user)->patch('admin/urls', [
            'id' => 1,
            'url' => 'https://url.com',
            'hash_name' => str_random(5),
            'user_id' => 1,
        ]);
        $response->assertStatus(302);
    }

    /**
     * @covers \App\Http\Controllers\Auth\AdminController::deleteUser()
     */
    public function testDeleteUser()
    {
        $response = $this->actingAs($this->user)->delete('admin/users', [
            'id' => 2,
        ]);
        $response->assertStatus(302);
    }

    /**
     * @covers \App\Http\Controllers\Auth\AdminController::deleteUser()
     */
    public function testDeleteUserException()
    {
        $response = $this->actingAs($this->user)->delete('admin/users', [
            'id' => 999,
        ]);
        $response->assertStatus(302);
    }

    /**
     * @covers \App\Http\Controllers\Auth\AdminController::restoreUser()
     */
    public function testRestoreUser()
    {
        $response = $this->actingAs($this->user)->post('admin/users/restore', [
            'id' => 2,
        ]);
        $response->assertStatus(302);
    }

    /**
     * @covers \App\Http\Controllers\Auth\AdminController::updateUser()
     */
    public function testUpdateUser()
    {
        $response = $this->actingAs($this->user)->patch('admin/users', [
            'id' => 1,
            'name' => 'Star Citizen Wiki',
            'requests_per_minute' => 60,
            'api_token' => str_random(60),
            'email' => 'info@star-citizen.wiki',
            'whitelisted' => true,
            'blacklisted' => false,
            'notes' => str_random(120),
            'password' => null,
        ]);
        $response->assertStatus(302);
    }
}
