<?php

namespace Tests\Feature\Model;

use App\Exceptions\URLNotWhitelistedException;
use App\Models\ShortURL\ShortURL;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;

/**
 * Class ShortURLModelTest
 * @package Tests\Feature\Model
 */
class ShortURLModelTest extends TestCase
{
    use DatabaseTransactions;

    private $url;
    private $hashName;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->url = 'https://star-citizen.wiki/'.str_random(16);
        $this->hashName = str_random(6);
    }

    /**
     * Test not WhitelistedException
     *
     * @covers \App\Models\ShortURL\ShortURL::createShortURL()
     * @covers \App\Exceptions\URLNotWhitelistedException
     */
    public function testNotWhitelistedException()
    {
        $this->expectException(URLNotWhitelistedException::class);
        ShortURL::createShortURL([
            'url' => 'https://notwhitelisted.com',
        ]);
    }

    /**
     * Test NotFound Exception
     *
     * @covers \App\Models\ShortURL\ShortURL::resolve()
     * @covers \Illuminate\Database\Eloquent\ModelNotFoundException
     */
    public function testHashNotExistsException()
    {
        $this->expectException(ModelNotFoundException::class);
        ShortURL::resolve('Does_Not_Exist');
    }

    /**
     * Test Repository Creation
     *
     * @covers \App\Models\ShortURL\ShortURL::createShortURL()
     */
    public function testShortURLCreation()
    {
        $url = ShortURL::createShortURL([
            'url' => $this->url,
            'hash_name' => $this->hashName,
            'user_id' => 1,
            'expires' => null,
        ]);

        $this->assertEquals($this->hashName, $url->hash_name);
    }

    /**
     * @covers \App\Models\ShortURL\ShortURL::sanitizeURL()
     */
    public function testURLSanitization()
    {
        $url = 'https://star-citizen.wiki';
        $urlSanitized = ShortURL::sanitizeURL($url);

        $this->assertEquals($url.'/', $urlSanitized);
    }
}
