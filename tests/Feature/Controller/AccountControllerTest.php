<?php

namespace Tests\Feature\Controller;

use App\Models\ShortURL\ShortURL;
use App\Models\User;
use Illuminate\Foundation\Testing\WithoutEvents;
use Illuminate\Support\Facades\Session;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class AccountControllerTest extends TestCase
{
    use DatabaseTransactions;

    private $user;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = factory(User::class)->create();
    }

    /**
     * @covers \App\Http\Controllers\Auth\AccountController::showAccountView()
     * @covers \App\Http\Middleware\RedirectIfAuthenticated
     */
    public function testAccountView()
    {
        $response = $this->actingAs($this->user)->get('account');
        $response->assertStatus(200);
    }

    /**
     * @covers \App\Http\Controllers\Auth\AccountController::delete()
     */
    public function testDeleteAccount()
    {
        $response = $this->actingAs($this->user)->delete('account', []);
        $response->assertStatus(302);
    }

    /**
     * @covers \App\Http\Controllers\Auth\AccountController::showEditAccountView()
     */
    public function testAccountEditFormView()
    {
        $response = $this->actingAs($this->user)->get('account/edit');
        $response->assertStatus(200);
    }

    /**
     * @covers \App\Http\Controllers\Auth\AccountController::showURLsView()
     */
    public function testURLView()
    {
        $response = $this->actingAs($this->user)->get('account/urls');
        $response->assertStatus(200);
    }

    /**
     * @covers \App\Http\Controllers\Auth\AccountController::showAddURLView()
     */
    public function testURLAddView()
    {
        $response = $this->actingAs($this->user)->get('account/urls/add');
        $response->assertStatus(200);
    }

    /**
     * @covers \App\Http\Controllers\Auth\AccountController::addURL()
     */
    public function testAddURL()
    {
        $response = $this->actingAs($this->user)->post('account/urls', [
            'url' => 'https://star-citizen.wiki/'.str_random(4),
            'hash_name' => str_random(4),
        ]);
        $response->assertStatus(302);
        $response->assertRedirect('account/urls');
    }

    /**
     * @covers \App\Http\Controllers\Auth\AccountController::addURL()
     */
    public function testAddURLException()
    {
        $response = $this->actingAs($this->user)->post('account/urls', [
            'url' => 'https://notwhitelisted.wiki/'.str_random(4),
            'hash_name' => str_random(4),
        ]);
        $response->assertStatus(302);
    }

    /**
     * @covers \App\Http\Controllers\Auth\AccountController::deleteURL()
     */
    public function testDeleteURL()
    {
        $response = $this->actingAs($this->user)->delete('account/urls', [
            'id' => 1,
        ]);
        $response->assertStatus(302);
    }

    /**
     * @covers \App\Http\Controllers\Auth\AccountController::showEditURLView()
     */
    public function testEditURLViewNotExist()
    {
        $response = $this->actingAs($this->user)->get('account/urls/-1');
        $response->assertStatus(302);
    }

    /**
     * @covers \App\Http\Controllers\Auth\AccountController::updateURL()
     * @covers \App\Models\ShortURL\ShortURL::createShortURL()
     * @covers \App\Http\Middleware\VerifyCsrfToken
     */
    public function testUpdateURL()
    {
        $hash_name = str_random(5);
        $url = ShortURL::createShortURL([
            'user_id' => $this->user->id,
            'url' => 'https://star-citizen.wiki/'.str_random(4),
            'hash_name' => $hash_name,
            'expires' => null,
        ]);

        $this->assertEquals($hash_name, $url->hash_name);

        $response = $this->actingAs($this->user)->patch('account/urls', [
            'id' => $url->id,
            'url' => 'https://star-citizen.wiki/'.str_random(4),
            'hash_name' => str_random(5),
        ]);

        $response->assertStatus(302);
    }

    /**
     * @covers \App\Http\Controllers\Auth\AccountController::updateAccount()
     * @covers \App\Http\Middleware\VerifyCsrfToken
     */
    public function testUpdateAccount()
    {
        $response = $this->actingAs($this->user)->patch('account', [
            'name' => 'UpdatedName',
            'email' => 'a'.str_random(5).'@star-citizen.wiki',
            'password' => null,
            'password_confirmed' => null,
        ]);

        $response->assertStatus(302);
    }
}
