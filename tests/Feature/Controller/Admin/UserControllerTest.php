<?php declare(strict_types = 1);

namespace Tests\Feature\Controller\Admin;

use App\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;

/**
 * Class UserControllerTest
 * @package Tests\Feature\Controller\Admin
 */
class UserControllerTest extends TestCase
{
    use DatabaseTransactions;

    private $user;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::find(1);
    }

    /**
     * @covers \App\Http\Controllers\Admin\\UserController::showEditUserView()
     * @covers \App\Http\Middleware\CheckIfAdmin
     */
    public function testEditUserView()
    {
        $response = $this->actingAs($this->user)->get('admin/users/1');
        $response->assertStatus(200);
    }
    /**
     * @covers \App\Http\Controllers\Admin\\UserController::showEditUserView()
     */
    public function testEditUserViewException()
    {
        $response = $this->actingAs($this->user)->get('admin/users/999');
        $response->assertStatus(302);
    }

    /**
     * @covers \App\Http\Controllers\Admin\\UserController::showUsersListView()
     */
    public function testUsersView()
    {
        $response = $this->actingAs($this->user)->get('admin/users');
        $response->assertStatus(200);
    }

    /**
     * @covers \App\Http\Controllers\Admin\\UserController::deleteUser()
     */
    public function testDeleteUser()
    {
        $response = $this->actingAs($this->user)->delete('admin/users', [
            'id' => 2,
        ]);
        $response->assertStatus(302);
    }

    /**
     * @covers \App\Http\Controllers\Admin\\UserController::deleteUser()
     */
    public function testDeleteUserException()
    {
        $response = $this->actingAs($this->user)->delete('admin/users', [
            'id' => 999,
        ]);
        $response->assertStatus(302);
    }

    /**
     * @covers \App\Http\Controllers\Admin\\UserController::restoreUser()
     */
    public function testRestoreUser()
    {
        $response = $this->actingAs($this->user)->post('admin/users/restore', [
            'id' => 2,
        ]);
        $response->assertStatus(302);
    }

    /**
     * @covers \App\Http\Controllers\Admin\\UserController::updateUser()
     */
    public function testUpdateUser()
    {
        $response = $this->actingAs($this->user)->patch('admin/users', [
            'id' => 1,
            'name' => 'Star Citizen Wiki',
            'requests_per_minute' => 60,
            'api_token' => str_random(60),
            'email' => 'info@star-citizen.wiki',
            'whitelisted' => true,
            'blacklisted' => false,
            'notes' => str_random(120),
            'password' => null,
        ]);
        $response->assertStatus(302);
    }
}
